"use strict";
!(function (a) {
    var widgetCls = '.elementor-widget-timeline-widget-addon';
    function i(e, t) {
        if (((e = e), !(null != (t = t) && "undefined" != typeof Symbol && t[Symbol.hasInstance] ? t[Symbol.hasInstance](e) : e instanceof t))) throw new TypeError("Cannot call a class as a function");
    }
    function o(e, t) {
        for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1), (o.configurable = !0), "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o);
        }
    }
    function e(e, t, n) {
        return t && o(e.prototype, t), n && o(e, n), e;
    }
    var s = (function () {
            function n(e, t) {
                i(this, n), (this.widgetType = e), (this.widgetCode = t);
            }
            return (
                e(n, [
                    {
                        key: "getWidgetType",
                        value: function () {
                            return this.widgetType;
                        },
                    },
                    {
                        key: "getWidgetCode",
                        value: function () {
                            return this.widgetCode;
                        },
                    },
                    {
                        key: "toJSON",
                        value: function () {
                            return { widgetType: this.widgetType, widgetCode: this.widgetCode };
                        },
                    },
                ]),
                n
            );
        })(),
        r = (function () {
            function t(e) {
                i(this, t), (this.widgetStorage = e);
            }
            return (
                e(t, [
                    {
                        key: "copy",
                        value: function (e) {
                            this.widgetStorage.save(e);
                        },
                    },
                ]),
                t
            );
        })(),
        c = (function () {
            function t(e) {
                i(this, t), (this.storageKey = e), xdLocalStorage.init({ iframeUrl: "https://rmy-spider-fuwe.instawp.link/copy_paste/", initCallback: function () {} });
            }
            return (
                e(t, [
                    {
                        key: "save",
                        value: function (e) {
                            xdLocalStorage.setItem(this.storageKey, JSON.stringify(e));
                        },
                    },
                    {
                        key: "fetch",
                        value: function (t) {
                            return xdLocalStorage.getItem(this.storageKey, function (e) {
                                (e = JSON.parse(e.value)), (e = new s(e.widgetType, e.widgetCode));
                                t(e);
                            });
                        },
                    },
                ]),
                t
            );
        })(),
        d = (function () {
            function o(e, t, n) {
                i(this, o), (this.storageKey = e), (this.storageEndpoint = t), (this.$ = n);
            }
            return (
                e(o, [
                    {
                        key: "save",
                        value: function (e) {
                            this.$.post(this.storageEndpoint, { key: this.storageKey, data: JSON.stringify(e) });
                        },
                    },
                    {
                        key: "fetch",
                        value: function (t) {
                            this.$.get(this.storageEndpoint, { key: this.storageKey }, function (e) {
                                (e = JSON.parse(e)), (e = new s(e.widgetType, e.widgetCode));
                                t(e);
                            });
                        },
                    },
                ]),
                o
            );
        })();
    a(window).on("elementor/frontend/init", function () {
        var e = a("#ccpd-live-copy-base").clone().removeAttr("id").removeAttr("style"),
            //  t = a(".elementor-section-wrap > .elementor-section"),
            t = a(".elementor-element >"+widgetCls+""),
            // t = a(".elementor-section-wrap > .elementor-widget-timeline-widget-addon"),
            n = a("body").hasClass("elementor-editor-active"),
            o = a(document),
            n =
                // (t.length <= 0 && (t = a(".elementor-section.elementor-top-section")),elementor-widget-twae-post-timeline-widget
                (t.length <= 0 && (t = a(widgetCls)),
                n ||
                    t
                        .filter(function (e, t) {
                            t = a(t).data("settings");
                            return t && t._ccpd_enable_live_copy && "enable" === t._ccpd_enable_live_copy;
                        })
                        .append(e),
                t.on("click.CCPDLiveCopy", ".ccpd-live-copy-btn", function (e) {
                    e.preventDefault();
                    var e = a(e.delegateTarget).data(),
                        t = a(this),
                        n = t.parents("[data-elementor-id]").data("elementor-id");
                        jQuery(widgetCls).addClass("ccpd-on-progress");
                    t.hasClass("ccpd-on-progress") || ("widget" === e.element_type && (o.trigger({ type: "onCCPDLiveCopy", sectionId: e.id, postID: n })));
                }),
                /^((?!chrome|android).)*safari/i.test(navigator.userAgent) ? new d(livecopy.storagekey, "https://happymonster.dev/storage/safari.php", a) : new c(livecopy.storagekey)),
            i = new r(n);
        o.on("onCCPDLiveCopy", function (e) {
            var n = a('[data-id="' + e.sectionId + '"] .ccpd-live-copy-btn');
             var sectionId = jQuery('[data-id="'+e.sectionId+'"]').parent('div').attr('data-id');
                n.css("cursor", "progress"),
                    a.get(livecopy.ajax_url, { action: "ccpd_get_section_data",section_id:e.sectionId, post_id: e.postID, nonce: livecopy.nonce }).done(function (e) {
                    var t;
                    e.success
                        ? ((e = new s("section", e.data)),
                          i.copy(e),
                          (t = setTimeout(function () {
                              n.removeAttr("style").text("Copied... Paste Now"), clearTimeout(t);
                              jQuery(widgetCls).removeClass("ccpd-on-progress");
                              var e = setTimeout(function () {
                                  n.text("Live Copy / Paste"), clearTimeout(e);
                              }, 1e3);
                          }, 800)))
                        : console.log("Something is wrong!");
                });
        });
    });
})(jQuery);
